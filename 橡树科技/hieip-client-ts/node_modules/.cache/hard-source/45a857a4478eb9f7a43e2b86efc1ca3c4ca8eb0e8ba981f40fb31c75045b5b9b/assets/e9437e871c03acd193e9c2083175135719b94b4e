<!--排班打印模板-->
<style>
    .scheduling {
        width: 100%;
        height: 100%;
    }

    .scheduling_table {
        width: 100%;
        height: 100%;
        border: 1px solid #000;
        border-collapse: collapse;
    }

    td, th {
        border: 1px solid #000;
        text-align: center;
        font-size: 12px;
    }

    td {
        line-height: 20px;
        min-width: 40px;
    }

</style>

<div class="scheduling">
    <table class="scheduling_table">
        <thead class="scheduling_tHead"></thead>
        <tbody class="scheduling_tBody"></tbody>
    </table>
</div>
<script>
  let _tHead = document.querySelector('.scheduling_tHead')
  let _tBody = document.querySelector('.scheduling_tBody')
  let data = window.data.data
  //    获取人员分组合并列
  let maxLevel = 0 // 最大组数

  //格式化data为简单层级关系
  function formatData(data, level) {
    let tmpArr = []
    for (let i = 0; i < data.length; i++) {
      const d1 = data[i];
      const tmp1 = {}
      tmp1.name = d1.groupName.trim()
      tmp1.rowspan = d1.staffCount
      tmp1.children = d1.children ? formatData(d1.children, level + 1) : []
      let person = d1.person
      for (let i = 0; i < person.length; i++) {
        const p = person[i];
        const tmpUser = {}
        tmpUser.name = p.userName.trim()
        tmpUser.level = level
        tmpUser.classes = []
        tmp1.children.push(tmpUser)
        const index = p.schedulingIndex
        for (let i = 0; i < index.length; i++) {
          const item = index[i];
          const classes = {}
          classes.name = item.classesName.trim()
          tmpUser.classes.push(classes)
        }
      }
      if (tmp1.rowspan > 0) {
        tmpArr.push(tmp1)
        if (level > maxLevel) maxLevel = level
      }
    }
    return tmpArr
  }

  const levelData = formatData(data.schedulingIndex, 1)
  // console.log(levelData);
  // console.log(JSON.stringify(formatData(data.schedulingIndex, 1), null, 2));
  // console.log(maxLevel);

  const tableMap = []

  // 将简单层级关系组成二维数组
  function formatLevelData(data, colIndex) {
    for (let i = 0; i < data.length; i++) {
      const d1 = data[i];
      appendRow({
        name: d1.name,
        rowspan: d1.rowspan,
        level: d1.level
      }, d1.rowspan || 1, colIndex, d1.level)
    }
    for (let i = 0; i < data.length; i++) {
      const d1 = data[i];
      if (d1.children) formatLevelData(d1.children, colIndex + 1)
      if (d1.classes) formatClassesData(d1.classes)
    }
  }

  // 添加班次
  function formatClassesData(data) {
    let offset = 0
    let row = tableMap[offset]
    let col = row[maxLevel + 1]
    while (col) {
      offset++
      row = tableMap[offset]
      col = row[maxLevel + 1]
    }
    for (let i = 0; i < data.length; i++) {
      row[maxLevel + 1 + i] = data[i]
    }
  }

  // 添加分组与人
  function appendRow(object, rowCount, colIndex, level) {
    let offset = 0
    for (let i = 0; i < rowCount; i++) {
      let row = tableMap[i + offset]
      if (!row) row = tableMap[i + offset] = []
      while (row[colIndex]) {
        offset++
        row = tableMap[i + offset]
        if (!row) row = tableMap[i + offset] = []
      }
      if (i === 0)
        row[colIndex] = object
      else row[colIndex] = Object.assign({}, object, {disable: true})
      if (level) {
        for (let i = 0; i < maxLevel - level; i++) {
          row[colIndex + i + 1] = Object.assign({}, object, {disable: true})
        }
      }
    }
  }

  formatLevelData(levelData, 0)

  // === table 调试 解开👇面注释可以看到一个文本格式的分组模型
  // console.log(tableMap);
  // let tableMapLog = ''
  //
  // function formatLogName(name, disable) {
  //   const len = name.replace(/[^\x00-\xff]/g, "01").length
  //   for (let i = 0; i < 8 - len; i++) {
  //     name += ' '
  //   }
  //   name += '\t'
  //   if (disable) name += '-'
  //   else name += '+'
  //   return name
  // }
  //
  // for (let i = 0; i < tableMap.length; i++) {
  //   if (!tableMap[i]) continue
  //   for (let j = 0; j < tableMap[i].length; j++) {
  //     if (tableMap[i][j])
  //       tableMapLog += formatLogName(tableMap[i][j].name, tableMap[i][j].disable) + '|'
  //     else
  //       tableMapLog += '|'
  //   }
  //   tableMapLog += '\n'
  // }
  // console.log(tableMapLog);


  function createDom(name, text, rowspan, colspan) {
    let element = document.createElement(name)
    if (text) element.innerText = text
    if (rowspan > 1) element.setAttribute('rowspan', rowspan)
    if (colspan > 1) element.setAttribute('colspan', colspan)
    return element
  }

  //      渲染表格头部html
  function renderHead() {
    let headHtml = '<tr><th colspan="' + (maxLevel + 1) + '">人员分组</th>';
    for (let i = 0; i < data.dayDate.length; i++) {
      headHtml += '<th>' +
        '<p>' + data.dayDate[i].day + '</p>' +
        '<p>' + data.dayDate[i].time + '</p>' +
        '</th>'
    }
    return headHtml
  }

  _tHead.innerHTML = renderHead();

  const trArray = []
  for (let i = 0; i < tableMap.length; i++) {
    if (!tableMap[i]) continue
    const tdArray = []
    for (let j = 0; j < tableMap[i].length; j++) {
      const tdObject = tableMap[i][j]
      if (tdObject.disable) continue
      if (tdObject) {
        tdArray.push(createDom('td', tdObject.name, tdObject.rowspan, maxLevel - tdObject.level + 1))
      }
    }
    trArray.push(tdArray)
  }
  trArray.forEach(t => {
    const tr = createDom('tr')
    for (let i = 0; i < t.length; i++) {
      const tdr = t[i];
      if (tdr) tr.appendChild(tdr)
    }
    _tBody.appendChild(tr)
  })

</script>
