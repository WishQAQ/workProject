"use strict";
/*
 * Copyright 2015 Palantir Technologies, Inc. All rights reserved.
 *
 * Licensed under the terms of the LICENSE file distributed with this project.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var ReactDOM = require("react-dom");
var Classes = require("../../common/classes");
var Errors = require("../../common/errors");
var props_1 = require("../../common/props");
var utils_1 = require("../../common/utils");
var REACT_CONTEXT_TYPES = {
    blueprintPortalClassName: function (obj, key) {
        if (obj[key] != null && typeof obj[key] !== "string") {
            return new Error(Errors.PORTAL_CONTEXT_CLASS_NAME_STRING);
        }
        return undefined;
    },
};
/**
 * This component detaches its contents and re-attaches them to document.body.
 * Use it when you need to circumvent DOM z-stacking (for dialogs, popovers, etc.).
 * Any class names passed to this element will be propagated to the new container element on document.body.
 */
var Portal = /** @class */ (function (_super) {
    tslib_1.__extends(Portal, _super);
    function Portal(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this.state = { hasMounted: false };
        _this.targetElement = document.createElement("div");
        _this.targetElement.classList.add(Classes.PORTAL);
        if (context.blueprintPortalClassName != null) {
            _this.targetElement.classList.add(context.blueprintPortalClassName);
        }
        return _this;
    }
    Portal.prototype.render = function () {
        // Only render `children` once this component has mounted, so they are immediately attached to the DOM tree and
        // can do DOM things like measuring or `autoFocus`. See long comment on componentDidMount in
        // https://reactjs.org/docs/portals.html#event-bubbling-through-portals
        return ReactDOM.createPortal(React.createElement("div", tslib_1.__assign({}, props_1.removeNonHTMLProps(this.props), { ref: this.props.containerRef }), this.state.hasMounted ? this.props.children : null), this.targetElement);
    };
    Portal.prototype.componentDidMount = function () {
        document.body.appendChild(this.targetElement);
        utils_1.safeInvoke(this.props.onChildrenMount);
        this.setState({ hasMounted: true });
    };
    Portal.prototype.componentWillUnmount = function () {
        this.targetElement.remove();
    };
    Portal.displayName = "Blueprint2.Portal";
    Portal.contextTypes = REACT_CONTEXT_TYPES;
    return Portal;
}(React.Component));
exports.Portal = Portal;
