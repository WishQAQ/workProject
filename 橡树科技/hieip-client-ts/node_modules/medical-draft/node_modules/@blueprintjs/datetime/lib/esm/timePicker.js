/*
 * Copyright 2015 Palantir Technologies, Inc. All rights reserved.
 *
 * Licensed under the terms of the LICENSE file distributed with this project.
 */
import * as tslib_1 from "tslib";
import { Classes as CoreClasses, Icon, Keys, Utils as BlueprintUtils } from "@blueprintjs/core";
import * as classNames from "classnames";
import * as React from "react";
import * as Classes from "./common/classes";
import * as DateUtils from "./common/dateUtils";
import { getDefaultMaxTime, getDefaultMinTime, getTimeUnit, getTimeUnitClassName, isTimeUnitValid, setTimeUnit, TimeUnit, wrapTimeAtUnit, } from "./common/timeUnit";
import * as Utils from "./common/utils";
export var TimePickerPrecision;
(function (TimePickerPrecision) {
    TimePickerPrecision[TimePickerPrecision["MINUTE"] = 0] = "MINUTE";
    TimePickerPrecision[TimePickerPrecision["SECOND"] = 1] = "SECOND";
    TimePickerPrecision[TimePickerPrecision["MILLISECOND"] = 2] = "MILLISECOND";
})(TimePickerPrecision || (TimePickerPrecision = {}));
var TimePicker = /** @class */ (function (_super) {
    tslib_1.__extends(TimePicker, _super);
    function TimePicker(props, context) {
        var _this = _super.call(this, props, context) || this;
        // begin method definitions: event handlers
        _this.getInputBlurHandler = function (unit) { return function (e) {
            var text = getStringValueFromInputEvent(e);
            _this.updateTime(parseInt(text, 10), unit);
        }; };
        _this.getInputChangeHandler = function (unit) { return function (e) {
            var TWO_DIGITS = /^\d{0,2}$/;
            var THREE_DIGITS = /^\d{0,3}$/;
            var text = getStringValueFromInputEvent(e);
            var isValid = false;
            switch (unit) {
                case TimeUnit.HOUR:
                case TimeUnit.MINUTE:
                case TimeUnit.SECOND:
                    isValid = TWO_DIGITS.test(text);
                    break;
                case TimeUnit.MS:
                    isValid = THREE_DIGITS.test(text);
                    break;
                default:
                    throw Error("Invalid TimeUnit");
            }
            if (isValid) {
                switch (unit) {
                    case TimeUnit.HOUR:
                        _this.updateState({ hourText: text });
                        break;
                    case TimeUnit.MINUTE:
                        _this.updateState({ minuteText: text });
                        break;
                    case TimeUnit.SECOND:
                        _this.updateState({ secondText: text });
                        break;
                    case TimeUnit.MS:
                        _this.updateState({ millisecondText: text });
                        break;
                    default:
                        throw Error("Invalid TimeUnit");
                }
            }
        }; };
        _this.getInputKeyDownHandler = function (unit) { return function (e) {
            handleKeyEvent(e, (_a = {},
                _a[Keys.ARROW_UP] = function () { return _this.incrementTime(unit); },
                _a[Keys.ARROW_DOWN] = function () { return _this.decrementTime(unit); },
                _a[Keys.ENTER] = function () {
                    e.currentTarget.blur();
                },
                _a));
            var _a;
        }; };
        _this.handleFocus = function (e) {
            if (_this.props.selectAllOnFocus) {
                e.currentTarget.select();
            }
        };
        _this.incrementTime = function (unit) { return _this.shiftTime(unit, 1); };
        _this.decrementTime = function (unit) { return _this.shiftTime(unit, -1); };
        if (props.value != null) {
            _this.state = _this.getFullStateFromValue(props.value);
        }
        else if (props.defaultValue != null) {
            _this.state = _this.getFullStateFromValue(props.defaultValue);
        }
        else {
            _this.state = _this.getFullStateFromValue(props.minTime);
        }
        return _this;
    }
    TimePicker.prototype.render = function () {
        var shouldRenderSeconds = this.props.precision >= TimePickerPrecision.SECOND;
        var shouldRenderMilliseconds = this.props.precision >= TimePickerPrecision.MILLISECOND;
        var classes = classNames(Classes.TIMEPICKER, this.props.className, (_a = {},
            _a[CoreClasses.DISABLED] = this.props.disabled,
            _a));
        /* tslint:disable:max-line-length */
        return (React.createElement("div", { className: classes },
            React.createElement("div", { className: Classes.TIMEPICKER_ARROW_ROW },
                this.maybeRenderArrowButton(true, TimeUnit.HOUR),
                this.maybeRenderArrowButton(true, TimeUnit.MINUTE),
                shouldRenderSeconds && this.maybeRenderArrowButton(true, TimeUnit.SECOND),
                shouldRenderMilliseconds && this.maybeRenderArrowButton(true, TimeUnit.MS)),
            React.createElement("div", { className: Classes.TIMEPICKER_INPUT_ROW },
                this.renderInput(Classes.TIMEPICKER_HOUR, TimeUnit.HOUR, this.state.hourText),
                this.renderDivider(),
                this.renderInput(Classes.TIMEPICKER_MINUTE, TimeUnit.MINUTE, this.state.minuteText),
                shouldRenderSeconds && this.renderDivider(),
                shouldRenderSeconds &&
                    this.renderInput(Classes.TIMEPICKER_SECOND, TimeUnit.SECOND, this.state.secondText),
                shouldRenderMilliseconds && this.renderDivider("."),
                shouldRenderMilliseconds &&
                    this.renderInput(Classes.TIMEPICKER_MILLISECOND, TimeUnit.MS, this.state.millisecondText)),
            React.createElement("div", { className: Classes.TIMEPICKER_ARROW_ROW },
                this.maybeRenderArrowButton(false, TimeUnit.HOUR),
                this.maybeRenderArrowButton(false, TimeUnit.MINUTE),
                shouldRenderSeconds && this.maybeRenderArrowButton(false, TimeUnit.SECOND),
                shouldRenderMilliseconds && this.maybeRenderArrowButton(false, TimeUnit.MS))));
        var _a;
        /* tslint:enable:max-line-length */
    };
    TimePicker.prototype.componentWillReceiveProps = function (nextProps) {
        var didMinTimeChange = nextProps.minTime !== this.props.minTime;
        var didMaxTimeChange = nextProps.maxTime !== this.props.maxTime;
        var didBoundsChange = didMinTimeChange || didMaxTimeChange;
        if (didBoundsChange) {
            var timeInRange = DateUtils.getTimeInRange(this.state.value, nextProps.minTime, nextProps.maxTime);
            this.setState(this.getFullStateFromValue(timeInRange));
        }
        if (nextProps.value != null && !DateUtils.areSameTime(nextProps.value, this.props.value)) {
            this.setState(this.getFullStateFromValue(nextProps.value));
        }
    };
    // begin method definitions: rendering
    TimePicker.prototype.maybeRenderArrowButton = function (isDirectionUp, timeUnit) {
        var _this = this;
        if (!this.props.showArrowButtons) {
            return null;
        }
        var classes = classNames(Classes.TIMEPICKER_ARROW_BUTTON, getTimeUnitClassName(timeUnit));
        var onClick = function () { return (isDirectionUp ? _this.incrementTime : _this.decrementTime)(timeUnit); };
        return (React.createElement("span", { className: classes, onClick: onClick },
            React.createElement(Icon, { icon: isDirectionUp ? "chevron-up" : "chevron-down" })));
    };
    TimePicker.prototype.renderDivider = function (text) {
        if (text === void 0) { text = ":"; }
        return React.createElement("span", { className: Classes.TIMEPICKER_DIVIDER_TEXT }, text);
    };
    TimePicker.prototype.renderInput = function (className, unit, value) {
        return (React.createElement("input", { className: classNames(Classes.TIMEPICKER_INPUT, className), onBlur: this.getInputBlurHandler(unit), onChange: this.getInputChangeHandler(unit), onFocus: this.handleFocus, onKeyDown: this.getInputKeyDownHandler(unit), value: value, disabled: this.props.disabled }));
    };
    // begin method definitions: state modification
    /**
     * Generates a full ITimePickerState object with all text fields set to formatted strings based on value
     */
    TimePicker.prototype.getFullStateFromValue = function (value) {
        var timeInRange = DateUtils.getTimeInRange(value, this.props.minTime, this.props.maxTime);
        /* tslint:disable:object-literal-sort-keys */
        return {
            hourText: formatTime(timeInRange.getHours(), TimeUnit.HOUR),
            minuteText: formatTime(timeInRange.getMinutes(), TimeUnit.MINUTE),
            secondText: formatTime(timeInRange.getSeconds(), TimeUnit.SECOND),
            millisecondText: formatTime(timeInRange.getMilliseconds(), TimeUnit.MS),
            value: timeInRange,
        };
        /* tslint:enable:object-literal-sort-keys */
    };
    TimePicker.prototype.shiftTime = function (unit, amount) {
        if (this.props.disabled) {
            return;
        }
        var newTime = getTimeUnit(unit, this.state.value) + amount;
        this.updateTime(wrapTimeAtUnit(unit, newTime), unit);
    };
    TimePicker.prototype.updateTime = function (time, unit) {
        var newValue = DateUtils.clone(this.state.value);
        if (isTimeUnitValid(unit, time)) {
            setTimeUnit(unit, time, newValue);
            if (DateUtils.isTimeInRange(newValue, this.props.minTime, this.props.maxTime)) {
                this.updateState({ value: newValue });
            }
            else if (!DateUtils.areSameTime(this.state.value, this.props.minTime)) {
                this.updateState(this.getFullStateFromValue(newValue));
            }
        }
        else {
            // reset to last known good state
            this.updateState(this.getFullStateFromValue(this.state.value));
        }
    };
    TimePicker.prototype.updateState = function (state) {
        var newState = state;
        var hasNewValue = newState.value != null && !DateUtils.areSameTime(newState.value, this.state.value);
        if (this.props.value == null) {
            // component is uncontrolled
            if (hasNewValue) {
                newState = this.getFullStateFromValue(newState.value);
            }
            this.setState(newState);
        }
        else {
            // component is controlled, and there's a new value
            // so set inputs' text based off of _old_ value and later fire onChange with new value
            if (hasNewValue) {
                this.setState(this.getFullStateFromValue(this.state.value));
            }
            else {
                // no new value, this means only text has changed (from user typing)
                // we want inputs to change, so update state with new text for the inputs
                // but don't change actual value
                this.setState(tslib_1.__assign({}, newState, { value: DateUtils.clone(this.state.value) }));
            }
        }
        if (hasNewValue) {
            BlueprintUtils.safeInvoke(this.props.onChange, newState.value);
        }
    };
    TimePicker.defaultProps = {
        disabled: false,
        maxTime: getDefaultMaxTime(),
        minTime: getDefaultMinTime(),
        precision: TimePickerPrecision.MINUTE,
        selectAllOnFocus: false,
        showArrowButtons: false,
    };
    TimePicker.displayName = "Blueprint2.TimePicker";
    return TimePicker;
}(React.Component));
export { TimePicker };
function formatTime(time, unit) {
    switch (unit) {
        case TimeUnit.HOUR:
            return time.toString();
        case TimeUnit.MINUTE:
        case TimeUnit.SECOND:
            return Utils.padWithZeroes(time.toString(), 2);
        case TimeUnit.MS:
            return Utils.padWithZeroes(time.toString(), 3);
        default:
            throw Error("Invalid TimeUnit");
    }
}
function getStringValueFromInputEvent(e) {
    return e.currentTarget.value;
}
function handleKeyEvent(e, actions, preventDefault) {
    if (preventDefault === void 0) { preventDefault = true; }
    for (var _i = 0, _a = Object.keys(actions); _i < _a.length; _i++) {
        var k = _a[_i];
        var key = Number(k);
        if (e.which === key) {
            if (preventDefault) {
                e.preventDefault();
            }
            actions[key]();
        }
    }
}
