"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var Handsontable = require("handsontable");
var settingsMapper_1 = require("./settingsMapper");
exports.SettingsMapper = settingsMapper_1.default;
require("handsontable/dist/handsontable.full.css");
/**
 * A Handsontable-ReactJS wrapper.
 *
 * To implement, use the `HotTable` tag with properties corresponding to Handsontable options.
 * For example:
 *
 * ```js
 * <HotTable root="hot" data={dataObject} contextMenu={true} colHeaders={true} width={600} height={300} stretchH="all" />
 *
 * // is analogous to
 * let hot = new Handsontable(document.getElementById('hot'), {
 *    data: dataObject,
 *    contextMenu: true,
 *    colHeaders: true,
 *    width: 600
 *    height: 300
 * });
 *
 * ```
 *
 * @class HotTable
 */
var HotTable = /** @class */ (function (_super) {
    __extends(HotTable, _super);
    function HotTable(props) {
        var _this = _super.call(this, props) || this;
        _this.hotInstance = null;
        _this.settingsMapper = new settingsMapper_1.default();
        _this.root = null;
        return _this;
    }
    /**
     * Initialize Handsontable after the component has mounted.
     */
    HotTable.prototype.componentDidMount = function () {
        var newSettings = this.settingsMapper.getSettings(this.props);
        this.hotInstance = new Handsontable(document.getElementById(this.root), newSettings);
    };
    /**
     * Call the `updateHot` method and prevent the component from re-rendering the instance.
     *
     * @param {Object} nextProps
     * @param {Object} nextState
     * @returns {Boolean}
     */
    HotTable.prototype.shouldComponentUpdate = function (nextProps, nextState) {
        this.updateHot(this.settingsMapper.getSettings(nextProps));
        return false;
    };
    /**
     * Destroy the Handsontable instance when the parent component unmounts.
     */
    HotTable.prototype.componentWillUnmount = function () {
        this.hotInstance.destroy();
    };
    /**
     * Render the table.
     */
    HotTable.prototype.render = function () {
        this.root = this.props.root || 'hot' + new Date().getTime();
        return React.createElement("div", { id: this.root });
    };
    /**
     * Call the `updateSettings` method for the Handsontable instance.
     * @param newSettings
     */
    HotTable.prototype.updateHot = function (newSettings) {
        this.hotInstance.updateSettings(newSettings);
    };
    return HotTable;
}(React.Component));
exports.default = HotTable;
