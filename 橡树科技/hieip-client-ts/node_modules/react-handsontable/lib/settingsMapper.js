"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Handsontable = require("handsontable");
var SettingsMapper = /** @class */ (function () {
    function SettingsMapper() {
        this.registeredHooks = Handsontable.hooks.getRegistered();
    }
    /**
     * Parse component settings into Handosntable-compatible settings.
     *
     * @param {Object} properties Object containing properties from the HotTable object.
     * @returns {Object} Handsontable-compatible settings object.
     */
    SettingsMapper.prototype.getSettings = function (properties) {
        var newSettings = {};
        if (properties.settings) {
            var settings = properties.settings;
            for (var key in settings) {
                if (settings.hasOwnProperty(key)) {
                    newSettings[this.trimHookPrefix(key)] = settings[key];
                }
            }
        }
        for (var key in properties) {
            if (key !== 'settings' && properties.hasOwnProperty(key)) {
                newSettings[this.trimHookPrefix(key)] = properties[key];
            }
        }
        return newSettings;
    };
    /**
     * Trim the "on" hook prefix.
     *
     * @param {String} prop Settings property.
     * @returns {String} Handsontable-compatible, prefix-less property name.
     */
    SettingsMapper.prototype.trimHookPrefix = function (prop) {
        if (prop.indexOf('on') === 0) {
            var hookName = prop.charAt(2).toLowerCase() + prop.slice(3, prop.length);
            if (this.registeredHooks.indexOf(hookName) > -1) {
                return hookName;
            }
        }
        // returns the string anyway, when we're sure all the hooks are registered, might be changed
        return prop;
    };
    return SettingsMapper;
}());
exports.default = SettingsMapper;
