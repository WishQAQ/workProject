/// <reference types="react" />
import * as React from 'react';
import * as Handsontable from 'handsontable';
import SettingsMapper from './settingsMapper';
import 'handsontable/dist/handsontable.full.css';
/**
 * A Handsontable-ReactJS wrapper.
 *
 * To implement, use the `HotTable` tag with properties corresponding to Handsontable options.
 * For example:
 *
 * ```js
 * <HotTable root="hot" data={dataObject} contextMenu={true} colHeaders={true} width={600} height={300} stretchH="all" />
 *
 * // is analogous to
 * let hot = new Handsontable(document.getElementById('hot'), {
 *    data: dataObject,
 *    contextMenu: true,
 *    colHeaders: true,
 *    width: 600
 *    height: 300
 * });
 *
 * ```
 *
 * @class HotTable
 */
export default class HotTable extends React.Component<HotTableProps> {
    hotInstance: Handsontable;
    settingsMapper: SettingsMapper;
    root: string;
    constructor(props: any);
    /**
     * Initialize Handsontable after the component has mounted.
     */
    componentDidMount(): void;
    /**
     * Call the `updateHot` method and prevent the component from re-rendering the instance.
     *
     * @param {Object} nextProps
     * @param {Object} nextState
     * @returns {Boolean}
     */
    shouldComponentUpdate(nextProps: any, nextState: any): boolean;
    /**
     * Destroy the Handsontable instance when the parent component unmounts.
     */
    componentWillUnmount(): void;
    /**
     * Render the table.
     */
    render(): JSX.Element;
    /**
     * Call the `updateSettings` method for the Handsontable instance.
     * @param newSettings
     */
    updateHot(newSettings: any): void;
}
export interface HotTableProps extends Handsontable.GridSettings {
    root?: string;
}
export { SettingsMapper };
