'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _core = require('@blueprintjs/core');

var _datetime = require('@blueprintjs/datetime');

var _moment3 = require('react-day-picker/moment');

var _moment4 = _interopRequireDefault(_moment3);

require('moment/locale/zh-cn');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var min = null,
    max = null,
    dateArr = []; /**
                   * Created by admin on 2017/4/20.
                   */

var DateInput = function (_React$Component) {
  (0, _inherits3.default)(DateInput, _React$Component);

  function DateInput() {
    var _ref;

    (0, _classCallCheck3.default)(this, DateInput);

    for (var _len = arguments.length, props = Array(_len), _key = 0; _key < _len; _key++) {
      props[_key] = arguments[_key];
    }

    var _this = (0, _possibleConstructorReturn3.default)(this, (_ref = DateInput.__proto__ || (0, _getPrototypeOf2.default)(DateInput)).call.apply(_ref, [this].concat(props)));

    _this.sta = {
      inputProps: {
        onKeyUp: function onKeyUp(e) {
          // console.log(e.selectionEnd);
          var code = e.keyCode;
          var value = e.target.value;
          // let reg = /\s/;//空格
          // let reg2 = /^[0-9]*$/;//数字
          // let dateMin=moment(min).format('YYYYMMDDHHmmss');
          // let dateMax=moment(max).format('YYYYMMDDHHmmss');
          if (code >= 48 && code <= 57 || code >= 96 && code <= 105) {
            //输入的为数字
            var lf = true;
            //输入的长度到达第3 位时开始判断是否已经结束‘年’的输入，n为null：无匹配年则判断第三位开始为月份输入
            if (value.toString().length === 3) {
              var n = null;
              //寻找输入的与数组前两位的年数可有匹配的
              dateArr.find(function (x) {
                if (parseInt(x / 100) === parseInt(value / 10)) {
                  n = x;
                }
              });
              //没有匹配的，则判断为正在输入年份
              if (n === null) {
                n = parseInt(value / 10); //取得前两位
                var y = null;
                dateArr.find(function (x) {
                  //取得前两位匹配的最后的年
                  if (x.toString().indexOf(n) !== -1) {
                    y = x;
                  }
                });
                lf = false;
                e.target.value = y + '-' + e.key; //组装赋值
              }
            } else
              //输入的长度到达第7 位时开始判断是否已经结束‘月’的输入
              if (value.toString().length === 7) {
                var last = value.split('');
                var month = '' + last[last.length - 2] + last[last.length - 1]; //取得输入的月数
                if (parseInt(month) > 12) {
                  //输入的月大于12，则判断为当前在输入的为小于10月的月份
                  lf = false;
                  var val = value.split('');
                  val.splice(5, 0, '0');
                  val.splice(7, 0, '-');
                  e.target.value = val.join('');
                }
              } else
                //输入的长度到达第10 位时开始判断是否已经结束‘日’的输入
                if (value.toString().length === 10) {
                  var _last = value.split('');
                  var before4 = value.toString().split('');
                  before4 = '' + before4[0] + before4[1] + before4[2] + before4[3]; //取得前四位
                  var _month = '' + _last[_last.length - 5] + _last[_last.length - 4]; //取得输入的月数
                  var temp = new Date(parseInt(before4), parseInt(_month), 0); //转换为日期格式
                  var monthMax = temp.getDate(); //取得输入的年月有多少天
                  var inputMonth = '' + _last[_last.length - 2] + _last[_last.length - 1]; //输入的日期
                  if (parseInt(inputMonth) > monthMax) {
                    //输入的日期大于输入月份的最大日期，则判断为当前在输入的为小于10月的月份
                    lf = false;
                    var _val = value.split('');
                    _val.splice(8, 0, '0');
                    _val.splice(10, 0, ' ');
                    e.target.value = _val.join('');
                  }
                } else
                  //输入的长度到达第13 位时开始判断是否已经结束‘时’的输入
                  if (value.toString().length === 13) {
                    var _last2 = value.split('');
                    var h = '' + _last2[_last2.length - 2] + _last2[_last2.length - 1]; //取得输入的时间
                    if (parseInt(h) > 24) {
                      //输入的小时大于12，则判断小时的输入已经结束
                      lf = false;
                      var _val2 = value.split('');
                      _val2.splice(11, 0, '0');
                      _val2.splice(13, 0, ':');
                      e.target.value = _val2.join('');
                    }
                  } else
                    //输入的长度到达第16 位时开始判断是否已经结束‘分’的输入
                    if (value.toString().length === 16) {
                      var _last3 = value.split('');
                      var f = '' + _last3[_last3.length - 2] + _last3[_last3.length - 1]; //取得输入的时间
                      if (parseInt(f) > 59) {
                        //输入的分钟大于60，则判断分钟的输入已经结束
                        lf = false;
                        var _val3 = value.split('');
                        _val3.splice(14, 0, '0');
                        _val3.splice(16, 0, ':');
                        e.target.value = _val3.join('');
                      }
                    }
            //
            if (value !== '' && lf) {
              //输入的都是数字&&是否为空&&不为汉字
              if (value.toString().indexOf('-') === -1 && value.toString().split('').length === 4) {
                //年
                var sz = value.split('');
                sz.splice(4, 0, '-');
                sz = sz.join('');
                e.target.value = sz.toString();
              } else {
                var _y = 0;
                value.toString().split('').find(function (x) {
                  if (x === '-') _y++;
                });
                var _sz = value.split('');
                if (_y === 1 && value.toString().split('').length === 7) {
                  //月
                  _sz.splice(7, 0, '-');
                  _sz = _sz.join('');
                  e.target.value = _sz.toString();
                } else if (_y === 2 && value.toString().split('').length === 10) {
                  //日
                  _sz.splice(10, 0, ' ');
                  _sz = _sz.join('');
                  e.target.value = _sz.toString();
                } else if (_y === 2 && value.toString().split('').length === 13) {
                  //时
                  _sz.splice(13, 0, ':');
                  _sz = _sz.join('');
                  e.target.value = _sz.toString();
                } else if (_y === 2 && value.toString().split('').length === 16) {
                  //分
                  _sz.splice(16, 0, ':');
                  _sz = _sz.join('');
                  e.target.value = _sz.toString();
                }
              }
            }
          } else {
            e.preventDefault();
          }
        },

        value: ""
        //todo 格式化输入日期
      } };

    min = _this.props.minDate;
    max = _this.props.maxDate;
    var dateMinY = (0, _moment2.default)(min).format('YYYY');
    var dateMaxY = (0, _moment2.default)(max).format('YYYY');
    for (var i = parseInt(dateMinY); i <= parseInt(dateMaxY); i++) {
      dateArr.push(i);
    }
    _this.state = {
      isReverse: true,
      position: _core.Position.TOP
      // this.state.inputProps.onKeyDown.bind(this);
    };return _this;
  }

  (0, _createClass3.default)(DateInput, [{
    key: 'onChange',


    //
    value: function onChange(v) {
      console.log("v=", v);
      this.props.dateChange(v);
    }
  }, {
    key: 'click',


    //
    value: function click() {
      if (document.documentElement.clientHeight - (0, _jquery2.default)(this.refs.div).offset().top - 20 > 250) {
        this.setState({ position: _core.Position.BOTTOM });
      } else {
        this.setState({ position: _core.Position.TOP });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          className = _props.className,
          oValue = _props.oValue,
          format = _props.format,
          timePrecision = _props.timePrecision,
          disabled = _props.disabled,
          other = (0, _objectWithoutProperties3.default)(_props, ['className', 'oValue', 'format', 'timePrecision', 'disabled']);
      var inputProps = this.sta.inputProps;

      return _react2.default.createElement(_datetime.DateInput, (0, _extends3.default)({}, other, {
        ref: 'dateInput',
        className: className,
        format: format,
        invalidDateMessage: '',
        outOfRangeMessage: '',
        value: oValue || '',
        inputProps: inputProps,
        locale: 'zh-cn',
        localeUtils: _moment4.default,
        onFocus: this.click.bind(this),
        onChange: this.onChange.bind(this),
        timePrecision: timePrecision ? true : undefined,
        disabled: disabled
      }));
    }
  }]);
  return DateInput;
}(_react2.default.Component);

exports.default = DateInput;
module.exports = exports['default'];