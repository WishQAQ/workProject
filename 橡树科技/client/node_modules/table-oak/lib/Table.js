"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Table = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _FormatType = require("./FormatType");

var _FormatType2 = _interopRequireDefault(_FormatType);

var _Table = require("material-oak/Table");

var _assert = require("assert");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by jahv on 2017/5/6.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var Table = exports.Table = function (_React$Component) {
    _inherits(Table, _React$Component);

    function Table() {
        var _ref;

        _classCallCheck(this, Table);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        var _this = _possibleConstructorReturn(this, (_ref = Table.__proto__ || Object.getPrototypeOf(Table)).call.apply(_ref, [this].concat(args)));

        _this.state = {
            data: null,
            noData: null,
            config: null,
            columnType: []
        };
        var _this$props = _this.props,
            data = _this$props.data,
            noData = _this$props.noData,
            config = _this$props.config;

        _this.state.data = data;
        _this.state.noData = noData;
        _this.state.config = config;
        return _this;
    }

    _createClass(Table, [{
        key: "componentWillMount",
        value: function componentWillMount() {
            var head = this.state.data.head;

            var lastHead = head[head.length - 1];
            this.analysisColumn(lastHead);
        }
    }, {
        key: "analysisColumn",
        value: function analysisColumn(lastHead) {
            var columnType = this.state.columnType;

            if (columnType.length > 0 && columnType.length > lastHead.length) {
                columnType.splice(lastHead.length, columnType.length - lastHead.length);
            }
            for (var i = 0; i < lastHead.length; i++) {
                columnType[i] = lastHead[i];
            }
        }
    }, {
        key: "componentWillReceiveProps",
        value: function componentWillReceiveProps(nextProps) {
            var _state = this.state,
                data = _state.data,
                config = _state.config;

            if (nextProps.data || nextProps.config) {
                try {
                    (0, _assert.deepEqual)(nextProps.data, data);
                    (0, _assert.deepEqual)(nextProps.config, config);
                    this.state.data = nextProps.data;
                    this.state.config = nextProps.config;
                    this.setState(this.state);
                } catch (e) {
                    console.log(e);
                }
            }
        }
    }, {
        key: "render",
        value: function render() {
            var _this2 = this;

            var _state2 = this.state,
                data = _state2.data,
                noDate = _state2.noDate,
                columnType = _state2.columnType;
            var _props$config = this.props.config,
                table = _props$config.table,
                header = _props$config.header,
                body = _props$config.body;
            var _props = this.props,
                formatType = _props.formatType,
                defaultFormatType = _props.defaultFormatType;

            if (data === null) return _react2.default.createElement(
                "div",
                { className: "table no-data" },
                noDate || "这儿什么都没有~"
            );
            return _react2.default.createElement(
                _Table.Table,
                table,
                _react2.default.createElement(
                    _Table.TableHeader,
                    header,
                    data.head.map(function (head, i) {
                        return _react2.default.createElement(
                            _Table.TableRow,
                            { key: i },
                            head.map(function (td, i) {
                                var text = td.text,
                                    type = td.type,
                                    source = td.source,
                                    other = _objectWithoutProperties(td, ["text", "type", "source"]);

                                return _react2.default.createElement(
                                    _Table.TableHeaderColumn,
                                    _extends({ key: i }, other),
                                    text
                                );
                            })
                        );
                    })
                ),
                _react2.default.createElement(
                    _Table.TableBody,
                    body,
                    data.data.map(function (body, i) {
                        return _react2.default.createElement(
                            _Table.TableRow,
                            { key: i },
                            columnType.map(function (column, i) {
                                return _react2.default.createElement(
                                    _Table.TableRowColumn,
                                    { key: i },
                                    (0, _react.isValidElement)(column.type) ? (formatType[column.type.type.name] || defaultFormatType[column.type.type.name] || function () {
                                        throw "没有指定转换类型";
                                    }).apply(_this2, [column, body]) : body[column.source] || ""
                                );
                            })
                        );
                    })
                )
            );
        }
    }]);

    return Table;
}(_react2.default.Component);

Table.propTypes = {
    data: _propTypes2.default.any,
    config: _propTypes2.default.any,
    noData: _propTypes2.default.string,
    formatType: _propTypes2.default.any,
    defaultFormatType: _propTypes2.default.any
};

Table.defaultProps = {
    config: {
        table: {},
        header: {},
        body: {}
    },
    defaultFormatType: _FormatType2.default,
    formatType: {}
};