/**
 * Created by jahv on 2017/5/6.
 */
import React, {isValidElement} from "react";
import PropTypes from "prop-types";
import FormatType from "./FormatType";
import {Table as MTable, TableBody, TableHeader, TableHeaderColumn, TableRow, TableRowColumn} from "material-oak/Table";
import {deepEqual} from "assert";

export class Table extends React.Component {
    constructor(...args) {
        super(...args);
        this.state = {
            data: null,
            noData: null,
            config: null,
            columnType: []
        };
        const {data, noData, config} = this.props;
        this.state.data = data;
        this.state.noData = noData;
        this.state.config = config;
    }

    componentWillMount() {
        const {head} = this.state.data;
        const lastHead = head[head.length - 1];
        this.analysisColumn(lastHead);
    }

    analysisColumn(lastHead) {
        let {columnType} = this.state;
        if (columnType.length > 0 && columnType.length > lastHead.length) {
            columnType.splice(lastHead.length, columnType.length - lastHead.length);
        }
        for (let i = 0; i < lastHead.length; i++) {
            columnType[i] = lastHead[i];
        }
    }

    componentWillReceiveProps(nextProps) {
        const {data, config} = this.state;
        if (nextProps.data || nextProps.config) {
            try {
                deepEqual(nextProps.data, data);
                deepEqual(nextProps.config, config);
                this.state.data = nextProps.data;
                this.state.config = nextProps.config;
                this.setState(this.state);
            } catch (e) {
                console.log(e);
            }
        }
    }

    render() {
        const {data, noDate, columnType} = this.state;
        const {table, header, body} = this.props.config;
        const {formatType, defaultFormatType} = this.props;
        if (data === null)return <div className="table no-data">{noDate || "这儿什么都没有~"}</div>;
        return (
            <MTable {...table}>
                <TableHeader {...header}>
                    {data.head.map((head, i) => {
                        return (
                            <TableRow key={i}>
                                {head.map((td, i) => {
                                    const {text, type, source, ...other} = td;
                                    return <TableHeaderColumn key={i} {...other}>{text}</TableHeaderColumn>
                                })}
                            </TableRow>
                        )
                    })}
                </TableHeader>
                <TableBody {...body}>
                    {data.data.map((body, i) => (
                        <TableRow key={i}>
                            {columnType.map((column, i) => (
                                <TableRowColumn key={i}>
                                    {isValidElement(column.type) ? (
                                        (formatType[column.type.type.name] ||
                                        defaultFormatType[column.type.type.name] || (() => {
                                            throw "没有指定转换类型"
                                        })).apply(this, [column, body])
                                    ) : (body[column.source] || "")}
                                </TableRowColumn>
                            ))}
                        </TableRow>
                    ))}
                </TableBody>
            </MTable>
        );
    }
}

Table.propTypes = {
    data: PropTypes.any,
    config: PropTypes.any,
    noData: PropTypes.string,
    formatType: PropTypes.any,
    defaultFormatType: PropTypes.any
};

Table.defaultProps = {
    config: {
        table: {},
        header: {},
        body: {}
    },
    defaultFormatType: FormatType,
    formatType: {}
};