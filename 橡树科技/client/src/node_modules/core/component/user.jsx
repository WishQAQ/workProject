/**
 * Created by jahv on 2017/4/11.
 */
import {Store} from "./store";

export class User {
  static _id = null;
  static _mac = null;
  static _info = null;
  static _token = null;
  static _grant = null;
  static _roles = null;
  static _remember = null;

  /**
   * 判断是否登录
   * @returns {boolean}
   */
  static isLogin() {
    return !!this.token();
  }
  static token() {
    if (!this._token) this._token = Store.session.get(this.sessionName("token"));
    return this._token;
  }
  static getRole(){
   return Store.session.get(this.sessionName('role'))
  }

  static sessionName(name) {
    return "session:" + this._id + ":" + name;
  }

  static id() {
    if (!this._id) {
      const windId = /win=(\d+)/.exec(navigator.userAgent);
      this._id = windId ? windId[1] : 1;
    }
    return this._id;
  }

  static mac() {
    if (!this._mac) this._mac = Store.session.get(this.sessionName("mac"));
    return this._mac;
  }

  static setMac(mac) {
    Store.session.set(this.sessionName("mac"), mac);
    this._mac = mac;
  }

  static setId(id) {
    this._id = id;
  }

  /**
   * 登录调用该方法
   * @param json
   * @returns {boolean}
   */
  static login(json) {
    if (json.token) {
      Store.session.set(this.sessionName("info"), json);
      Store.session.set(this.sessionName('role'),json.role)
      Store.session.set(this.sessionName("token"), json.token);
      return true;
    } else {
      console.log("登录失败！");
      return false;
    }
  }

  static setGrant(json) {
    if (json) {
      Store.session.set(this.sessionName("grant"), json)
      return true
    }
  }

  static getGrant() {
    if (!this._grant) this._grant = Store.session.get(this.sessionName("grant"));
    return this._grant;
  }

  static setRoles(json) {
    if (json) {
      Store.session.set(this.sessionName("roles"), json);
      return true
    }
  }

  static getRoles() {
    if (!this._roles) this._roles = Store.session.get(this.sessionName("roles"));
    return this._roles;
  }

  static setRemember(json) {
    if (json) {
      Store.session.set(this.sessionName("remember"), json);
      return true
    }
  }

  static getRemember() {
    if (!this._remember) this._remember = Store.session.get(this.sessionName("remember"));
    return this._remember;
  }

  static removeRemember() {
    this._remember = null;
    Store.session.remove(this.sessionName('remember'))
  }

  /**
   * 注销
   */
  static logout() {
    this._info = null;
    this._token = null;
    Store.session.remove(this.sessionName("token"));
    Store.session.remove(this.sessionName("info"));
  }

  /**
   * 获取用户数据
   * @returns {{}}
   */
  static info() {
    if (!this._info) this._info = Store.session.get(this.sessionName("info"));
    return this._info;
  }

  /**
   * 获取用户数组
   * @returns {*}
   */
  static role() {
    return this.info().roleList;
  }

  /**
   * 获取用户最大权限角色
   * @returns {*}
   */
  static maxRole() {
    let role = null;
    this.info().roleList.forEach(t => {
      if (role !== null) {
        if (role.grade < t.grade) {
          role = t;
        }
      } else {
        role = t;
      }
    });
    return role;
  }
}